{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Election Results\n",
      "-------------------------\n",
      "Total Votes: 3521001\n",
      "-------------------------\n",
      "Khan: 63.000%   (2218231)\n",
      "Correy: 20.000%   (704200)\n",
      "Li: 14.000%   (492940)\n",
      "O'Tooley: 3.000%   (105630)\n",
      "-------------------------\n",
      "Winner: Khan\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "1"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#import dependecies\n",
    "import os\n",
    "#module for reading CSV files\n",
    "import csv\n",
    "\n",
    "\n",
    "pypoll = os.path.join('election_data.csv')\n",
    "\n",
    "#using csv module to read data\n",
    "with open(pypoll, newline ='') as csvfile:\n",
    "    \n",
    "    #csv reader specifies delimiter and variable that holds contents\n",
    "    csvreader = csv.reader(csvfile, delimiter = ',')\n",
    "\n",
    "votesPerCandidate = {}\n",
    "totalVotes = 0 \n",
    "\n",
    "\n",
    "# open up election_data\n",
    "\n",
    "with open(pypoll, newline='') as csvfile:\n",
    "\n",
    "    # CSV reader specifies delimiter and variable that holds contents\n",
    "    csvreader = csv.reader(csvfile, delimiter=',')\n",
    "\n",
    "    # print(csvreader)\n",
    "\n",
    "    # Read the header row first\n",
    "    csv_header = next(csvreader)\n",
    "    # print(f\"CSV Header: {csv_header}\")\n",
    "\n",
    "    # Read each row of data after the header\n",
    "    for row in csvreader:\n",
    "        totalVotes += 1\n",
    "        if row[2] not in votesPerCandidate:\n",
    "            votesPerCandidate[row[2]] = 1\n",
    "        else:\n",
    "            votesPerCandidate[row[2]] += 1   \n",
    "        \n",
    "    \n",
    "print(\"Election Results\")\n",
    "print(\"-------------------------\")\n",
    "print(\"Total Votes: \" + str(totalVotes))\n",
    "print(\"-------------------------\")\n",
    "\n",
    "for candidate, votes in votesPerCandidate.items():\n",
    "    print(candidate + \": \" + \"{:.3%}\".format(votes/totalVotes) + \"   (\" +  str(votes) + \")\")\n",
    "    \n",
    "print(\"-------------------------\") \n",
    "\n",
    "winner = max(votesPerCandidate, key=votesPerCandidate.get)\n",
    "\n",
    "print(f\"Winner: {winner}\")\n",
    "\n",
    "#output file\n",
    "\n",
    "f = open(\"election_results.txt\", \"w\")\n",
    "f.write(\"Election Results\")\n",
    "f.write('\\n')\n",
    "f.write(\"-------------------------\")\n",
    "f.write('\\n')\n",
    "f.write(\"Total Votes: \" + str(totalVotes))\n",
    "f.write('\\n')\n",
    "f.write(\"-------------------------\")\n",
    "f.write('\\n')\n",
    "\n",
    "for candidate, votes in votesPerCandidate.items():\n",
    "    f.write(candidate + \": \" + \"{:.3%}\".format(votes/totalVotes) + \"   (\" +  str(votes) + \")\")\n",
    "    f.write('\\n')\n",
    "f.write(\"-------------------------\") \n",
    "f.write('\\n')\n",
    "f.write(f\"Winner: {winner}\")\n",
    "f.write('\\n')\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
